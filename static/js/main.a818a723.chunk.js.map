{"version":3,"sources":["actions/dictActions.js","actions/types.js","components/WordColumn.js","components/WordRowColumn.js","components/Navbar.js","reducers/dictReducer.js","reducers/index.js","store.js","components/AddUpdateForm.js","App.js","serviceWorker.js","index.js"],"names":["API_URL","process","getWords","_ref","Object","asyncToGenerator","regenerator_default","a","mark","_callee","dispatch","json","wrap","_context","prev","next","setappsLoading","axios","get","concat","sent","data","type","payload","t0","console","log","stop","_x","apply","this","arguments","connect","state","dict","getWord","id","_ref2","_callee2","_context2","window","scrollTo","_x2","deleteWord","_ref5","_callee5","_context5","delete","_x5","_ref$word","word","_id","english","german","description","react_default","createElement","className","join","onClick","bind","WordRowColumn","previousProps","props","isUpdate","words","loading","Fragment","map","components_WordColumn","key","Component","Navbar","initialState","single_word","errmsg","combineReducers","length","undefined","action","objectSpread","filter","toConsumableArray","middleWare","thunk","composeEnhancers","__REDUX_DEVTOOLS_EXTENSION_COMPOSE__","compose","store","createStore","rootReducer","applyMiddleware","AddUpdateForm","valError","onChange","e","_this","setState","defineProperty","target","name","value","clearfields","isValidWord","str","test","isValidInput","isValid","cancel","onSubmit","preventDefault","newWord","createWord","updateWord","addWord","prevProps","errorForm","errorMessage","htmlFor","_ref3","_callee3","_context3","post","_x3","_ref4","_callee4","_context4","put","_x4","App","es","components_AddUpdateForm","components_WordRowColumn","Boolean","location","hostname","match","ReactDOM","render","src_App_0","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.a818a723.chunk.js","sourcesContent":["import axios from \"axios\";\nimport {\n  GET_WORDS,\n  GET_WORD,\n  ADD_WORD,\n  UPDATE_WORD,\n  DELETE_WORD,\n  APPS_LOADING,\n  CANCEL\n} from \"./types\";\n\n// for testing delay in api calls\n// const pause = n => new Promise(r => setTimeout(r, n));\n\nconst API_URL = process.env.REACT_APP_URL;\n\nexport const getWords = () => async dispatch => {\n  dispatch(setappsLoading());\n  // await pause(1500);\n  try {\n    const json = await axios.get(`${API_URL}`);\n    // console.log(json.data);\n    if (json.data) {\n      dispatch({\n        type: GET_WORDS,\n        payload: json.data\n      });\n    }\n  } catch (error) {\n    console.log(error);\n  }\n};\n\nexport const getWord = id => async dispatch => {\n  window.scrollTo(0, 0);\n  try {\n    const json = await axios.get(`${API_URL}/${id}`);\n    // console.log(json);\n    if (json.data) {\n      dispatch({\n        type: GET_WORD,\n        payload: json.data\n      });\n    }\n  } catch (error) {\n    console.log(error);\n  }\n};\n\nexport const addWord = word => async dispatch => {\n  try {\n    const json = await axios.post(`${API_URL}`, word);\n    // console.log(json);\n    dispatch({\n      type: ADD_WORD,\n      payload: json.data\n    });\n  } catch (error) {\n    console.log(error);\n  }\n};\n\nexport const updateWord = word => async dispatch => {\n  try {\n    const json = await axios.put(`${API_URL}/${word._id}`, word);\n    // console.log(json);\n    dispatch({\n      type: UPDATE_WORD,\n      payload: json.data\n    });\n  } catch (error) {\n    console.log(error);\n  }\n};\n\nexport const deleteWord = id => async dispatch => {\n  try {\n    await axios.delete(`${API_URL}/${id}`);\n    // console.log(json);\n    dispatch({\n      type: DELETE_WORD,\n      payload: id\n    });\n  } catch (error) {\n    console.log(error);\n  }\n};\n\nexport const setappsLoading = () => {\n  return {\n    type: APPS_LOADING\n  };\n};\n\nexport const cancel = () => {\n  return {\n    type: CANCEL\n  };\n};\n","export const GET_WORDS = \"GET_WORDS\";\nexport const GET_WORD = \"GET_WORD\";\nexport const ADD_WORD = \"ADD_WORD\";\nexport const UPDATE_WORD = \"UPDATE_WORD\";\nexport const DELETE_WORD = \"DELETE_WORD\";\nexport const APPS_LOADING = \"APPS_LOADING\";\nexport const GET_ERROR = \"GET_ERROR\";\nexport const CANCEL = \"CANCEL\";\n","import React from \"react\";\r\nimport { connect } from \"react-redux\";\r\nimport PropTypes from \"prop-types\";\r\nimport { getWord, deleteWord } from \"../actions/dictActions\";\r\n// import store from \"../store\";\r\n\r\nconst WordColumn = ({\r\n  word: { _id, english, german, description },\r\n  getWord,\r\n  deleteWord\r\n}) => {\r\n  return (\r\n    <div className=\"row mb-2 nogutters\">\r\n      <div className=\"col col-3 pt-1\"> {english} </div>\r\n      <div className=\"col col-4 pt-1\"> {german.join(\",\")} </div>\r\n      <div className=\"col col-3 pt-1\"> {description} </div>\r\n      <div className=\"col col-1\">\r\n        <button\r\n          className=\"btn btn-success btn-phone\"\r\n          onClick={getWord.bind(this, _id)}\r\n        >\r\n          <i className=\"far fa-sm upd-phone\">&#xf044;</i>\r\n        </button>\r\n      </div>\r\n\r\n      <div className=\"col col-1\">\r\n        <button\r\n          className=\"btn btn-danger btn-phone\"\r\n          onClick={deleteWord.bind(this, _id)}\r\n        >\r\n          <i className=\"far fa-sm del-phone\">&#xf2ed;</i>\r\n        </button>\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\nWordColumn.propTypes = {\r\n  dict: PropTypes.object.isRequired\r\n};\r\n\r\nconst mapStateToProps = state => ({\r\n  dict: state.dict\r\n});\r\n\r\nexport default connect(\r\n  mapStateToProps,\r\n  { getWord, deleteWord }\r\n)(WordColumn);\r\n","import { connect } from \"react-redux\";\r\nimport PropTypes from \"prop-types\";\r\nimport WordColumn from \"./WordColumn\";\r\nimport { getWords } from \"../actions/dictActions\";\r\n\r\nimport React, { Component } from \"react\";\r\n\r\nclass WordRowColumn extends Component {\r\n  componentDidUpdate(previousProps) {\r\n    if (this.props.dict.isUpdate !== previousProps.dict.isUpdate) {\r\n      this.props.getWords();\r\n    }\r\n  }\r\n  render() {\r\n    const {\r\n      dict: { words }\r\n    } = this.props;\r\n    if (this.props.dict.loading) {\r\n      return <p>App is loading</p>;\r\n    }\r\n    return (\r\n      <>\r\n        <div className=\"row mb-2 nogutters font-weight-bold head\">\r\n          <div className=\"col col-3 \"> English </div>\r\n          <div className=\"col col-4 \"> German </div>\r\n          <div className=\"col col-3 \"> Type </div>\r\n          <div className=\"col col-1 \"> Edit </div>\r\n          <div className=\"col col-1 \"> Delete </div>\r\n        </div>\r\n        <div className=\"mt-2\">\r\n          {words.map(word => (\r\n            <WordColumn word={word} key={word._id} />\r\n          ))}\r\n        </div>\r\n      </>\r\n    );\r\n  }\r\n}\r\n\r\nWordRowColumn.propTypes = {\r\n  dict: PropTypes.object.isRequired\r\n};\r\n\r\nconst mapStateToProps = state => ({\r\n  dict: state.dict\r\n});\r\n\r\nexport default connect(\r\n  mapStateToProps,\r\n  { getWords }\r\n)(WordRowColumn);\r\n","import React from \"react\";\r\n\r\nexport default () => {\r\n  return (\r\n    <nav className=\"navbar navbar-dark bg-primary\">\r\n      <h1 className=\"navbar-brand\">English - German Dictionary </h1>\r\n    </nav>\r\n  );\r\n};\r\n","import {\n  GET_WORDS,\n  GET_WORD,\n  ADD_WORD,\n  UPDATE_WORD,\n  DELETE_WORD,\n  APPS_LOADING,\n  CANCEL\n} from \"../actions/types\";\n\nconst initialState = {\n  words: [],\n  single_word: null,\n  loading: false,\n  isUpdate: false, // for the editform vs addform\n  errmsg: \"\"\n};\n\nexport default function(state = initialState, action) {\n  switch (action.type) {\n    case GET_WORDS:\n      // console.log(\"get words was called\");\n      return {\n        ...state,\n        words: action.payload,\n        loading: false\n      };\n    case GET_WORD:\n      // console.log(action.payload);\n      return {\n        ...state,\n        single_word: action.payload,\n        isUpdate: true\n      };\n    case UPDATE_WORD:\n      return {\n        ...state,\n\n        words: state.words.map(word => {\n          return word._id === action.payload._id ? action.payload : word;\n        }),\n        isUpdate: false\n      };\n    case DELETE_WORD:\n      // console.log(\"deleted\");\n      // console.log(action.payload);\n      return {\n        ...state,\n        words: state.words.filter(word => word._id !== action.payload)\n      };\n    case ADD_WORD:\n      return {\n        ...state,\n        words: [action.payload, ...state.words]\n      };\n    case APPS_LOADING:\n      return {\n        ...state,\n        loading: true\n      };\n    case CANCEL:\n      // console.log(\"cancelled\");\n      return {\n        ...state,\n        isUpdate: false\n      };\n\n    default:\n      return state;\n  }\n}\n","import { combineReducers } from \"redux\";\nimport dictReducer from \"./dictReducer\";\n\nexport default combineReducers({\n  dict: dictReducer\n});\n","import { createStore, applyMiddleware, compose } from \"redux\";\nimport thunk from \"redux-thunk\";\nimport rootReducer from \"./reducers\";\n\nconst initialState = {};\n\nconst middleWare = [thunk];\n\nconst composeEnhancers = window.__REDUX_DEVTOOLS_EXTENSION_COMPOSE__ || compose;\nconst store = createStore(\n  rootReducer,\n  initialState,\n  composeEnhancers(applyMiddleware(...middleWare))\n);\n\nexport default store;\n","import React, { Component } from \"react\";\r\n\r\nimport { connect } from \"react-redux\";\r\nimport { addWord, updateWord, getWords, cancel } from \"../actions/dictActions\";\r\nimport PropTypes from \"prop-types\";\r\n\r\nclass AddUpdateForm extends Component {\r\n  state = {\r\n    _id: \"\",\r\n    english: \"\",\r\n    german: \"\",\r\n    description: \"\",\r\n    valError: false\r\n  };\r\n\r\n  static propTypes = {\r\n    dict: PropTypes.object,\r\n    addWord: PropTypes.func,\r\n    updateWord: PropTypes.func,\r\n    getWords: PropTypes.func,\r\n    cancel: PropTypes.func\r\n  };\r\n\r\n  onChange = e => {\r\n    this.setState({ [e.target.name]: e.target.value });\r\n  };\r\n\r\n  clearfields = () => {\r\n    this.setState({ _id: \"\", english: \"\", german: \"\", description: \"\" });\r\n  };\r\n\r\n  isValidWord = str => {\r\n    return !/[^a-zäöüß,-\\s]/i.test(str);\r\n  };\r\n  isValidInput = () => {\r\n    return (\r\n      this.isValidWord(this.state.english) &&\r\n      this.isValidWord(this.state.german) &&\r\n      this.isValidWord(this.state.description)\r\n    );\r\n  };\r\n\r\n  isValid = () => {\r\n    return this.state.english && this.state.german && this.state.description;\r\n  };\r\n\r\n  createWord() {\r\n    if (!this.isValid() || !this.isValidInput()) {\r\n      this.setState({ valError: true });\r\n      return null;\r\n    } else {\r\n      // console.log(\"valid\");\r\n      this.setState({ valError: false });\r\n      return {\r\n        english: this.state.english,\r\n        german: this.state.german,\r\n        description: this.state.description\r\n      };\r\n    }\r\n  }\r\n\r\n  cancel = () => {\r\n    // e.preventDefault();\r\n    this.setState({ valError: false });\r\n    this.clearfields();\r\n    this.props.cancel();\r\n    // console.log(\"canc\");\r\n  };\r\n\r\n  onSubmit = e => {\r\n    e.preventDefault();\r\n    console.log(this.state);\r\n    const newWord = this.createWord();\r\n    if (!newWord) {\r\n      return console.log(\"no submit\");\r\n    }\r\n    // Add word or update via addapp/update action\r\n\r\n    this.props.dict.isUpdate\r\n      ? this.props.updateWord({ ...newWord, _id: this.state._id })\r\n      : this.props.addWord(newWord);\r\n\r\n    this.clearfields();\r\n  };\r\n\r\n  componentDidMount() {}\r\n  componentDidUpdate(prevProps) {\r\n    // Typical usage (don't forget to compare props):\r\n    // only do something if isUpdate is true and props dont change to preven ininite loop\r\n    if (\r\n      this.props.dict.isUpdate &&\r\n      this.props.dict.isUpdate !== prevProps.dict.isUpdate\r\n    ) {\r\n      this.setState({\r\n        _id: this.props.dict.single_word._id,\r\n        english: this.props.dict.single_word.english,\r\n        german: this.props.dict.single_word.german,\r\n        description: this.props.dict.single_word.description,\r\n        errorForm: this.props.dict.errorForm\r\n      });\r\n    }\r\n  }\r\n\r\n  render() {\r\n    // console.log(this.props.dict.single_word);\r\n    // console.log(this.props.dict.errmsg);\r\n    // console.log(this.state);\r\n    // console.log(this.props);\r\n\r\n    const errorMessage = this.state.valError ? (\r\n      <div className=\"my-3\">\r\n        <div className=\"alert alert-danger\">\r\n          Please fill in all fields correctly\r\n        </div>\r\n      </div>\r\n    ) : null;\r\n\r\n    return (\r\n      <form className=\"mt-3 lmargin\" onSubmit={this.onSubmit}>\r\n        {errorMessage}\r\n        <div className=\"form-group row\">\r\n          <label\r\n            htmlFor=\"english\"\r\n            className=\"col-1 col-sm-2 col-md-1 col-form-label\"\r\n          >\r\n            english\r\n          </label>\r\n          <div className=\"col-sm-8 \">\r\n            <input\r\n              className=\"form-control\"\r\n              type=\"text\"\r\n              name=\"english\"\r\n              id=\"english\"\r\n              value={this.state.english}\r\n              onChange={this.onChange}\r\n            />\r\n          </div>\r\n        </div>\r\n\r\n        <div className=\"form-group row\">\r\n          <label\r\n            htmlFor=\"german\"\r\n            className=\"col-1 col-sm-2 col-md-1 col-form-label\"\r\n          >\r\n            german\r\n          </label>\r\n          <div className=\"col-sm-8\">\r\n            <input\r\n              className=\"form-control\"\r\n              type=\"text\"\r\n              name=\"german\"\r\n              id=\"german\"\r\n              value={this.state.german}\r\n              onChange={this.onChange}\r\n            />\r\n          </div>\r\n        </div>\r\n\r\n        <div className=\"form-group row\">\r\n          <label\r\n            htmlFor=\"description\"\r\n            className=\"col-1 col-sm-2 col-md-1 col-form-label\"\r\n          >\r\n            type\r\n          </label>\r\n          <div className=\"col-sm-8\">\r\n            <input\r\n              className=\"form-control\"\r\n              type=\"text\"\r\n              name=\"description\"\r\n              id=\"description\"\r\n              value={this.state.description}\r\n              onChange={this.onChange}\r\n            />\r\n          </div>\r\n        </div>\r\n\r\n        <div className=\"form-group row\">\r\n          <div className=\"col-sm-8\">\r\n            <button type=\"submit\" className=\"btn btn-primary mb-2 mr-2\">\r\n              {this.props.dict.isUpdate ? \"Update Word\" : \"Add Word\"}\r\n            </button>\r\n            <button\r\n              type=\"button\"\r\n              onClick={this.cancel}\r\n              className=\"btn btn-warning mb-2\"\r\n            >\r\n              Cancel\r\n            </button>\r\n          </div>\r\n        </div>\r\n      </form>\r\n    );\r\n  }\r\n}\r\n\r\nconst mapStateToProps = state => ({\r\n  dict: state.dict\r\n});\r\n\r\nexport default connect(\r\n  mapStateToProps,\r\n  { addWord, updateWord, getWords, cancel }\r\n)(AddUpdateForm);\r\n","import React, { Component } from \"react\";\nimport WordRowColumn from \"./components/WordRowColumn\";\nimport Navbar from \"./components/Navbar\";\n\nimport { Provider } from \"react-redux\";\nimport store from \"./store\";\n\nimport { getWords } from \"./actions/dictActions\";\n\nimport \"bootstrap/dist/css/bootstrap.min.css\";\nimport \"./App.css\";\nimport AddUpdateForm from \"./components/AddUpdateForm\";\n\nclass App extends Component {\n  componentDidMount() {\n    store.dispatch(getWords());\n  }\n  render() {\n    return (\n      <Provider store={store}>\n        <Navbar />\n        <div className=\"container\">\n          <AddUpdateForm />\n          <WordRowColumn />\n        </div>\n      </Provider>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}