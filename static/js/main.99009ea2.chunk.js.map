{"version":3,"sources":["actions/dictActions.js","actions/types.js","components/WordColumn.js","components/WordRowColumn.js","components/Navbar.js","reducers/dictReducer.js","reducers/index.js","store.js","components/AddUpdateForm.js","App.js","serviceWorker.js","index.js"],"names":["API_URL","process","getWords","dispatch","setappsLoading","axios","get","concat","then","res","data","type","payload","catch","err","console","log","connect","state","dict","getWord","id","window","scrollTo","deleteWord","delete","_ref","_ref$word","word","_id","english","german","description","react_default","a","createElement","className","join","onClick","bind","WordRowColumn","previousProps","this","props","isUpdate","words","Fragment","map","components_WordColumn","key","Component","Navbar","initialState","single_word","loading","errmsg","combineReducers","arguments","length","undefined","action","Object","objectSpread","filter","toConsumableArray","middleWare","thunk","composeEnhancers","__REDUX_DEVTOOLS_EXTENSION_COMPOSE__","compose","store","createStore","rootReducer","applyMiddleware","apply","AddUpdateForm","valError","onChange","e","_this","setState","defineProperty","target","name","value","clearfields","isValidWord","str","test","isValidInput","isValid","cancel","onSubmit","preventDefault","newWord","createWord","updateWord","addWord","prevProps","errorForm","errorMessage","htmlFor","post","put","App","es","components_AddUpdateForm","components_WordRowColumn","Boolean","location","hostname","match","ReactDOM","render","src_App_0","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.99009ea2.chunk.js","sourcesContent":["import axios from \"axios\";\nimport {\n  GET_WORDS,\n  GET_WORD,\n  ADD_WORD,\n  UPDATE_WORD,\n  DELETE_WORD,\n  APPS_LOADING,\n  CANCEL\n} from \"./types\";\n\nconst API_URL = process.env.REACT_APP_URL;\n\nexport const getWords = () => dispatch => {\n  dispatch(setappsLoading());\n  // scroll to form\n\n  axios\n    .get(`${API_URL}`)\n    .then(res => {\n      // console.log(\"getWords was called successfully\");\n      if (res.data) {\n        dispatch({\n          type: GET_WORDS,\n          payload: res.data\n        });\n      }\n    })\n    .catch(err => {\n      console.log(err);\n    });\n};\n\nexport const getWord = id => dispatch => {\n  window.scrollTo(0, 0);\n  axios\n    .get(`${API_URL}/${id}`)\n    .then(res => {\n      if (res.data) {\n        // console.log(\"getWord was caled in action\");\n        // console.log(res.data);\n        dispatch({\n          type: GET_WORD,\n          payload: res.data\n        });\n        // } else {\n        //   dispatch({\n        //     type: GET_ERROR,\n        //     payload: \"could not get single word\"\n        //   });\n      }\n    })\n    .catch(err => {\n      console.log(err);\n    });\n};\n\nexport const addWord = word => dispatch => {\n  axios\n    .post(`${API_URL}`, word)\n    .then(res =>\n      dispatch({\n        type: ADD_WORD,\n        payload: res.data\n      })\n    )\n    .catch(err => {\n      console.log(err);\n    });\n};\n\nexport const updateWord = word => dispatch => {\n  axios\n    .put(`${API_URL}/${word._id}`, word)\n    .then(res => {\n      dispatch({\n        type: UPDATE_WORD,\n        payload: res.data\n      });\n    })\n    .catch(err => {\n      console.log(err);\n    });\n};\n\nexport const deleteWord = id => dispatch => {\n  axios\n    .delete(`${API_URL}/${id}`)\n    .then(res =>\n      dispatch({\n        type: DELETE_WORD,\n        payload: id\n      })\n    )\n    .catch(err => {\n      console.log(err);\n    });\n};\n\nexport const setappsLoading = () => {\n  return {\n    type: APPS_LOADING\n  };\n};\n\n// export const getError = () => {\n//   return {\n//     type: GET_ERROR\n//   };\n// };\n\nexport const cancel = () => {\n  return {\n    type: CANCEL\n  };\n};\n","export const GET_WORDS = \"GET_WORDS\";\nexport const GET_WORD = \"GET_WORD\";\nexport const ADD_WORD = \"ADD_WORD\";\nexport const UPDATE_WORD = \"UPDATE_WORD\";\nexport const DELETE_WORD = \"DELETE_WORD\";\nexport const APPS_LOADING = \"APPS_LOADING\";\nexport const GET_ERROR = \"GET_ERROR\";\nexport const CANCEL = \"CANCEL\";\n","import React from \"react\";\r\nimport { connect } from \"react-redux\";\r\nimport PropTypes from \"prop-types\";\r\nimport { getWord, deleteWord } from \"../actions/dictActions\";\r\n// import store from \"../store\";\r\n\r\nconst WordColumn = ({\r\n  word: { _id, english, german, description },\r\n  getWord,\r\n  deleteWord\r\n}) => {\r\n  return (\r\n    <div className=\"row mb-2 nogutters\">\r\n      <div className=\"col col-3 pt-1\"> {english} </div>\r\n      <div className=\"col col-4 pt-1\"> {german.join(\",\")} </div>\r\n      <div className=\"col col-3 pt-1\"> {description} </div>\r\n      <div className=\"col col-1\">\r\n        <button\r\n          className=\"btn btn-success btn-phone\"\r\n          onClick={getWord.bind(this, _id)}\r\n        >\r\n          <i className=\"far fa-sm upd-phone\">&#xf044;</i>\r\n        </button>\r\n      </div>\r\n\r\n      <div className=\"col col-1\">\r\n        <button\r\n          className=\"btn btn-danger btn-phone\"\r\n          onClick={deleteWord.bind(this, _id)}\r\n        >\r\n          <i className=\"far fa-sm del-phone\">&#xf2ed;</i>\r\n        </button>\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\nWordColumn.propTypes = {\r\n  dict: PropTypes.object.isRequired\r\n};\r\n\r\nconst mapStateToProps = state => ({\r\n  dict: state.dict\r\n});\r\n\r\nexport default connect(\r\n  mapStateToProps,\r\n  { getWord, deleteWord }\r\n)(WordColumn);\r\n","import { connect } from \"react-redux\";\r\nimport PropTypes from \"prop-types\";\r\nimport WordColumn from \"./WordColumn\";\r\nimport { getWords } from \"../actions/dictActions\";\r\n\r\nimport React, { Component } from \"react\";\r\n\r\nclass WordRowColumn extends Component {\r\n  componentDidUpdate(previousProps) {\r\n    if (this.props.dict.isUpdate !== previousProps.dict.isUpdate) {\r\n      this.props.getWords();\r\n    }\r\n  }\r\n  render() {\r\n    const {\r\n      dict: { words }\r\n    } = this.props;\r\n    // if (this.props.dict.loading) {\r\n    //   return <p>App is loading</p>;\r\n    // } else\r\n    return (\r\n      <>\r\n        <div className=\"row mb-2 nogutters font-weight-bold head\">\r\n          <div className=\"col col-3 \"> English </div>\r\n          <div className=\"col col-4 \"> German </div>\r\n          <div className=\"col col-3 \"> Type </div>\r\n          <div className=\"col col-1 \"> Edit </div>\r\n          <div className=\"col col-1 \"> Delete </div>\r\n        </div>\r\n        <div className=\"mt-2\">\r\n          {words.map(word => (\r\n            <WordColumn word={word} key={word._id} />\r\n          ))}\r\n        </div>\r\n      </>\r\n    );\r\n  }\r\n}\r\n\r\nWordRowColumn.propTypes = {\r\n  dict: PropTypes.object.isRequired\r\n};\r\n\r\nconst mapStateToProps = state => ({\r\n  dict: state.dict\r\n});\r\n\r\nexport default connect(\r\n  mapStateToProps,\r\n  { getWords }\r\n)(WordRowColumn);\r\n","import React from \"react\";\r\n\r\nexport default () => {\r\n  return (\r\n    <nav className=\"navbar navbar-dark bg-primary\">\r\n      <h1 className=\"navbar-brand\">English - German Dictionary </h1>\r\n    </nav>\r\n  );\r\n};\r\n","import {\n  GET_WORDS,\n  GET_WORD,\n  ADD_WORD,\n  UPDATE_WORD,\n  DELETE_WORD,\n  APPS_LOADING,\n  CANCEL\n} from \"../actions/types\";\n\nconst initialState = {\n  words: [],\n  single_word: null,\n  loading: false,\n  isUpdate: false, // for the editform vs addform\n  errmsg: \"\"\n};\n\nexport default function(state = initialState, action) {\n  switch (action.type) {\n    case GET_WORDS:\n      // console.log(\"get words was called\");\n      return {\n        ...state,\n        words: action.payload,\n        loading: false\n      };\n    case GET_WORD:\n      // console.log(action.payload);\n      return {\n        ...state,\n        single_word: action.payload,\n        isUpdate: true\n      };\n    case UPDATE_WORD:\n      return {\n        ...state,\n\n        words: state.words.map(word => {\n          return word._id === action.payload._id ? action.payload : word;\n        }),\n        isUpdate: false\n      };\n    case DELETE_WORD:\n      // console.log(\"deleted\");\n      // console.log(action.payload);\n      return {\n        ...state,\n        words: state.words.filter(word => word._id !== action.payload)\n      };\n    case ADD_WORD:\n      return {\n        ...state,\n        words: [action.payload, ...state.words]\n      };\n    case APPS_LOADING:\n      return {\n        ...state,\n        loading: true\n      };\n    case CANCEL:\n      // console.log(\"cancelled\");\n      return {\n        ...state,\n        isUpdate: false\n      };\n\n    default:\n      return state;\n  }\n}\n","import { combineReducers } from \"redux\";\nimport dictReducer from \"./dictReducer\";\n\nexport default combineReducers({\n  dict: dictReducer\n});\n","import { createStore, applyMiddleware, compose } from \"redux\";\nimport thunk from \"redux-thunk\";\nimport rootReducer from \"./reducers\";\n\nconst initialState = {};\n\nconst middleWare = [thunk];\n\nconst composeEnhancers = window.__REDUX_DEVTOOLS_EXTENSION_COMPOSE__ || compose;\nconst store = createStore(\n  rootReducer,\n  initialState,\n  composeEnhancers(applyMiddleware(...middleWare))\n);\n\nexport default store;\n","import React, { Component } from \"react\";\r\n\r\nimport { connect } from \"react-redux\";\r\nimport { addWord, updateWord, getWords, cancel } from \"../actions/dictActions\";\r\nimport PropTypes from \"prop-types\";\r\n\r\nclass AddUpdateForm extends Component {\r\n  state = {\r\n    _id: \"\",\r\n    english: \"\",\r\n    german: \"\",\r\n    description: \"\",\r\n    valError: false\r\n  };\r\n\r\n  static propTypes = {\r\n    dict: PropTypes.object,\r\n    addWord: PropTypes.func,\r\n    updateWord: PropTypes.func,\r\n    getWords: PropTypes.func,\r\n    cancel: PropTypes.func\r\n  };\r\n\r\n  onChange = e => {\r\n    this.setState({ [e.target.name]: e.target.value });\r\n  };\r\n\r\n  clearfields = () => {\r\n    this.setState({ _id: \"\", english: \"\", german: \"\", description: \"\" });\r\n  };\r\n\r\n  isValidWord = str => {\r\n    return !/[^a-zäöüß,-\\s]/i.test(str);\r\n  };\r\n  isValidInput = () => {\r\n    return (\r\n      this.isValidWord(this.state.english) &&\r\n      this.isValidWord(this.state.german) &&\r\n      this.isValidWord(this.state.description)\r\n    );\r\n  };\r\n\r\n  isValid = () => {\r\n    return this.state.english && this.state.german && this.state.description;\r\n  };\r\n\r\n  createWord() {\r\n    if (!this.isValid() || !this.isValidInput()) {\r\n      this.setState({ valError: true });\r\n      return null;\r\n    } else {\r\n      // console.log(\"valid\");\r\n      this.setState({ valError: false });\r\n      return {\r\n        english: this.state.english,\r\n        german: this.state.german,\r\n        description: this.state.description\r\n      };\r\n    }\r\n  }\r\n\r\n  cancel = () => {\r\n    // e.preventDefault();\r\n    this.setState({ valError: false });\r\n    this.clearfields();\r\n    this.props.cancel();\r\n    // console.log(\"canc\");\r\n  };\r\n\r\n  onSubmit = e => {\r\n    e.preventDefault();\r\n    console.log(this.state);\r\n    const newWord = this.createWord();\r\n    if (!newWord) {\r\n      return console.log(\"no submit\");\r\n    }\r\n    // Add word or update via addapp/update action\r\n\r\n    this.props.dict.isUpdate\r\n      ? this.props.updateWord({ ...newWord, _id: this.state._id })\r\n      : this.props.addWord(newWord);\r\n\r\n    this.clearfields();\r\n  };\r\n\r\n  componentDidMount() {}\r\n  componentDidUpdate(prevProps) {\r\n    // Typical usage (don't forget to compare props):\r\n    // only do something if isUpdate is true and props dont change to preven ininite loop\r\n    if (\r\n      this.props.dict.isUpdate &&\r\n      this.props.dict.isUpdate !== prevProps.dict.isUpdate\r\n    ) {\r\n      this.setState({\r\n        _id: this.props.dict.single_word._id,\r\n        english: this.props.dict.single_word.english,\r\n        german: this.props.dict.single_word.german,\r\n        description: this.props.dict.single_word.description,\r\n        errorForm: this.props.dict.errorForm\r\n      });\r\n    }\r\n  }\r\n\r\n  render() {\r\n    // console.log(this.props.dict.single_word);\r\n    // console.log(this.props.dict.errmsg);\r\n    // console.log(this.state);\r\n    // console.log(this.props);\r\n\r\n    const errorMessage = this.state.valError ? (\r\n      <div className=\"my-3\">\r\n        <div className=\"alert alert-danger\">\r\n          Please fill in all fields correctly\r\n        </div>\r\n      </div>\r\n    ) : null;\r\n\r\n    return (\r\n      <form className=\"mt-3\" onSubmit={this.onSubmit}>\r\n        {errorMessage}\r\n        <div className=\"form-group row\">\r\n          <label\r\n            htmlFor=\"english\"\r\n            className=\"col-1 col-sm-2 col-md-1 col-form-label\"\r\n          >\r\n            english\r\n          </label>\r\n          <div className=\"col-sm-8 \">\r\n            <input\r\n              className=\"form-control\"\r\n              type=\"text\"\r\n              name=\"english\"\r\n              id=\"english\"\r\n              value={this.state.english}\r\n              onChange={this.onChange}\r\n            />\r\n          </div>\r\n        </div>\r\n\r\n        <div className=\"form-group row\">\r\n          <label\r\n            htmlFor=\"german\"\r\n            className=\"col-1 col-sm-2 col-md-1 col-form-label\"\r\n          >\r\n            german\r\n          </label>\r\n          <div className=\"col-sm-8\">\r\n            <input\r\n              className=\"form-control\"\r\n              type=\"text\"\r\n              name=\"german\"\r\n              id=\"german\"\r\n              value={this.state.german}\r\n              onChange={this.onChange}\r\n            />\r\n          </div>\r\n        </div>\r\n\r\n        <div className=\"form-group row\">\r\n          <label\r\n            htmlFor=\"description\"\r\n            className=\"col-1 col-sm-2 col-md-1 col-form-label\"\r\n          >\r\n            type\r\n          </label>\r\n          <div className=\"col-sm-8\">\r\n            <input\r\n              className=\"form-control\"\r\n              type=\"text\"\r\n              name=\"description\"\r\n              id=\"description\"\r\n              value={this.state.description}\r\n              onChange={this.onChange}\r\n            />\r\n          </div>\r\n        </div>\r\n\r\n        <div className=\"form-group row\">\r\n          <div className=\"col-sm-8\">\r\n            <button type=\"submit\" className=\"btn btn-primary mb-2 mr-2\">\r\n              {this.props.dict.isUpdate ? \"Update Word\" : \"Add Word\"}\r\n            </button>\r\n            <button\r\n              type=\"button\"\r\n              onClick={this.cancel}\r\n              className=\"btn btn-warning mb-2\"\r\n            >\r\n              Cancel\r\n            </button>\r\n          </div>\r\n        </div>\r\n      </form>\r\n    );\r\n  }\r\n}\r\n\r\nconst mapStateToProps = state => ({\r\n  dict: state.dict\r\n});\r\n\r\nexport default connect(\r\n  mapStateToProps,\r\n  { addWord, updateWord, getWords, cancel }\r\n)(AddUpdateForm);\r\n","import React, { Component } from \"react\";\nimport WordRowColumn from \"./components/WordRowColumn\";\nimport Navbar from \"./components/Navbar\";\n\nimport { Provider } from \"react-redux\";\nimport store from \"./store\";\n\nimport { getWords } from \"./actions/dictActions\";\n\nimport \"bootstrap/dist/css/bootstrap.min.css\";\nimport \"./App.css\";\nimport AddUpdateForm from \"./components/AddUpdateForm\";\n\nclass App extends Component {\n  componentDidMount() {\n    store.dispatch(getWords());\n  }\n  render() {\n    return (\n      <Provider store={store}>\n        <Navbar />\n        <div className=\"container\">\n          <AddUpdateForm />\n          <WordRowColumn />\n        </div>\n      </Provider>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}